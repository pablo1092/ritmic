/*
 * Copyright (C) 2016 David Rizo Valero
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package es.ua.dlsi.im3.core.score.io.musicxml;

import java.util.ArrayDeque;
import java.util.HashMap;

import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.lang3.math.Fraction;
import org.xml.sax.SAXException;

import es.ua.dlsi.im3.IM3Exception;
import es.ua.dlsi.im3.core.score.Accidentals;
import es.ua.dlsi.im3.core.score.Figures;
import es.ua.dlsi.im3.core.score.NoteNames;
import es.ua.dlsi.im3.core.score.PositionAboveBelow;
import es.ua.dlsi.im3.core.score.StemDirection;
import es.ua.dlsi.im3.core.score.Time;
import es.ua.dlsi.im3.core.score.io.XMLSAXImporter;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMAccidental;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMBeam;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMClef;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMCreator;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMDynamics;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMFermata;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMHairpin;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMHairpinCrescendo;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMHairpinDiminuendo;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMIdentification;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMKey;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMLyrics;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMMeasure;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMMovement;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMNoteOrRest;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMPart;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMPartGroup;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMSlur;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMSong;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMStaff;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMStaffPlaceHolder;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMTie;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMTimeSignature;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMTuplet;
import es.ua.dlsi.im3.core.score.io.abstractmodel.AMWork;
import es.ua.dlsi.im3.io.ImportException;


/**
 * MusicXML implemented with SAX to improve performance over JAXB.
 * 
 * @author drizo
 */
public class MusicXMLSAXImporterAbstractModel extends XMLSAXImporter {
	static final HashMap<String, Figures> FIGURES = new HashMap<>();
	// TODO MusicXML figures, Â¿normalizar en MusicXMLImporter?
	static {
		FIGURES.put("breve", Figures.BREVE);
		FIGURES.put("whole", Figures.WHOLE);
		FIGURES.put("half", Figures.HALF);
		FIGURES.put("quarter", Figures.QUARTER);
		FIGURES.put("eighth", Figures.EIGHTH);
		FIGURES.put("16th", Figures.SIXTEENTH);
		FIGURES.put("32th", Figures.THIRTY_SECOND);
		FIGURES.put("32nd", Figures.THIRTY_SECOND);
		FIGURES.put("64th", Figures.SIXTY_FOURTH);
		FIGURES.put("128th", Figures.HUNDRED_TWENTY_EIGHTH);
		FIGURES.put("256th", Figures.TWO_HUNDRED_FIFTY_SIX);

	}
	
	private ArrayDeque<AMPartGroup> partGroups;
	AMPart currentScorePart;
	private AMMeasure currentMeasure;
	AMNoteOrRest currentNote;
	Integer currentDivisions;
	AMAccidental lastAccidental;
	AMTuplet lastTuplet;
	HashMap<String, AMBeam> currentBeams;
	private HashMap<String, AMSlur> currentSlurs;
	private HashMap<String, AMTie> currentTies;
	String lastInsertedTieTag;  
	AMBeam lastBeam;
	AMLyrics lastLyrics;
	AMKey lastKey;
	AMTimeSignature lastTimeSignature;
	AMClef lastClef;
	AMHairpin currentHairpin;
	Time currentTime;
	/**
	 * Used to disambiguate symbols like duration that can be found in note or backup symbols
	 */
	enum eContexts {
		eNote, eForward, eBackup, eChord
	}
	eContexts context;
	AMStaff lastStaff;
	AMStaffPlaceHolder currentStaffPlaceHolder;

	@Override
	protected void init() throws ParserConfigurationException, SAXException {
		song = new AMSong();
		currentDivisions = null;
		partGroups = new ArrayDeque<>();
	}
	

	private PositionAboveBelow getPositionFromPlacement(String placement) {
		PositionAboveBelow position;
		if (placement == null) {
			position = PositionAboveBelow.UNDEFINED;
		} else if (placement.equals("below")) {
			position = PositionAboveBelow.BELOW;
		} else {
			position = PositionAboveBelow.ABOVE; 
		}
		return position;
	}

	
	private PositionAboveBelow getPositionFromOrientation(String orientation) throws ImportException {
		PositionAboveBelow position;
		if (orientation == null) {
			position = PositionAboveBelow.UNDEFINED;
		} else if (orientation.equals("under")) {
			position = PositionAboveBelow.BELOW;
		} else if (orientation.equals("over")) {
			position = PositionAboveBelow.ABOVE; 
		} else {
			throw new ImportException("Undefined orientation type: '" + orientation + "'");
		}
		return position;
	}
	
	private PositionAboveBelow getPositionForFermata(String type) {
		PositionAboveBelow position;
		if (type == null) {
			position = PositionAboveBelow.UNDEFINED;
		} else if (type.equals("upright")) {
			position = PositionAboveBelow.ABOVE;
		} else {
			position = PositionAboveBelow.BELOW; 
		}
		return position;
	}
	
	AMStaff getOrCreateStaff(String number) throws ImportException {
		AMStaff staff = currentScorePart.getStaffOrNull(number);
		if (staff == null) {
			staff = new AMStaff(number);
			currentScorePart.addStaff(number, staff);
		}
		return staff;
	}
	

	private void handleTie(String element, HashMap<String, String> attributes) throws ImportException {
		String type = getAttribute(attributes, "type");
		String number = getOptionalAttribute(attributes, "number");
		if (number == null) {
			number = "0";
		}
		AMTie tie = currentTies.get(number);
		//System.out.println("> "+ element + " " + type + " " + number + " " + currentNote);
		if (type.equals("start")) {
			if (tie == null) {
				lastInsertedTieTag = element;
				tie = new AMTie(currentNote);
				//System.out.println("\tInserted tie " + tie.hashCode());
				currentNote.addConnector(tie);
				currentTies.put(number, tie);
				//System.out.println("\tSTART: " + currentTies);				
			} else {
				//System.out.println("\ttie != null, start ommited-");
			}
		} else if (type.equals("stop") && element.equals(lastInsertedTieTag)) {
			if (tie != null) {
				//System.out.println("\tUsing tie " + tie.hashCode());
				tie.setTo(currentNote);
				currentNote.addConnector(tie);
				currentScorePart.addConnector(tie);				
				currentTies.remove(number);
				//System.out.println("\tSTOP: " + currentTies);
			} else {
				//System.out.println("\ttie = null, stop ommited-");
			}
		} // if not equals skip
		/*if (tie == null) {
			if (type.equals("start")) {
				tie = new AMTie(currentNote);
				currentNote.addConnector(tie);
				currentTies.put(number, tie);
				System.out.println("\tSTART: " + currentTies);
			} // else already inserted
			else {
				System.out.println("\ttie = null, stop ommited");
			}
		} else {
			if (type.equals("stop")) {
				tie.setTo(currentNote);
				currentNote.addConnector(tie);
				currentScorePart.addConnector(tie);				
				currentTies.remove(number);
				System.out.println("\tSTOP: " + currentTies);
			} // else, tie and tied are present
			else {
				System.out.println("\ttie != null, start ommited");
			}
		}*/
	}

	Figures getFigure(String content) throws ImportException {
		Figures figure = FIGURES.get(content);
		if (figure == null) {
			throw new ImportException("Unknown figure type: " + content);
		}
		return figure;
	}

	@Override
	public void handleElementContent(String currentElement, String content) throws ImportException {
		String type;
		AMPartGroup partGroup;
		switch (currentElement) {
		// score-partwise.work
		case "work-number":
			song.getWork().setNumber(content);
			break;
		case "work-title":
			song.getWork().setTitle(content);
			break;
		case "opus":
			song.getWork().setHrefOpus(content);
			break;
		case "movement-number":
			song.getMovement().setNumber(content);
			break;
		case "movement-title":
			song.getMovement().setTitle(content);
			break;
		case "creator":
			type = getElementContentFor(currentElement);
			song.getIdentification().addCreator(new AMCreator(type, content));
			break;
		case "group-name":
			partGroup = song.getLastPartGroup();
			partGroup.setName(content);
			break;
		case "part-name":
			if (currentScorePart == null) {
				throw new ImportException("No current part for giving part-name");
			}
			currentScorePart.setName(content);
			break;
		case "staff-type":
			lastStaff.setType(content);
			break;
		case "staff-lines":
			lastStaff.setLines(Integer.parseInt(content));
			break;
		case "step":
			try {
				currentNote.setDiatonicNote(NoteNames.noteFromName(content));
			} catch (IM3Exception e) {
				throw new ImportException(e);
			}
			break;
		case "alter":
			currentNote.setAlteration(Integer.parseInt(content));
			break;
		case "octave":
			currentNote.setOctave(Integer.parseInt(content));
			break;
		case "duration":
			// in MusicXML the divisions are set in terms of meter denominator, not as the MIDI resolution, where the 
			// resolution is set in terms of quarter. We normalize this fact with this constant that will be the ratio between
			// the meter denominator and the quarter
			if (currentDivisions == null) {
				throw new ImportException("Divisions are not set yet");
			}
			int iduration = Integer.parseInt(content);
			Time duration = new Time(Fraction.getFraction(iduration, currentDivisions));
			/*
			double duration = ((float) iduration) / (float) currentDivisions;
			if (duration == 0) {
				throw new ImportException("Invalid duration 0");
			}*/
			//lastDuration = duration;
			if (context == eContexts.eNote) {
				currentNote.setDuration(duration);
				currentTime = currentTime.add(duration); 
			} else if (context == eContexts.eBackup) {
				currentTime = currentTime.substract(duration);				
			} else if (context == eContexts.eForward) {
				currentTime = currentTime.add(duration);
			} else if (context != eContexts.eChord) {
				throw new ImportException("Duration expected to be inside a note, forward or backup and is '" + (context==null?"empty":context) +"'");
			}
			break;
		case "voice":
			//20170217 currentScorePart.addLayer(content);
			//20170217 - built in completeMissingElements of AMPart ... lastStaff.addLayer(content);
			if (currentNote != null) {
				currentNote.setLayer(content);
			} else if (currentStaffPlaceHolder != null) {
				currentStaffPlaceHolder.setLayer(content);
			} else {
				throw new ImportException("Unhandled layer in context: " + this.elementStack);
			}
			break;
		case "type":
			Figures figure = getFigure(content);
			currentNote.setFigure(figure);
			break;
		case "accidental":
			Accidentals acc = decodeAccidental(content);
			lastAccidental.setAccidental(acc);
			currentNote.setAccidental(lastAccidental);
			lastAccidental = null;
			break;
		case "actual-notes":
			if (lastTuplet == null) {
				lastTuplet = new AMTuplet();
				currentScorePart.addTuplet(lastTuplet);
			}
			lastTuplet.setActualNotesCount(Integer.parseInt(content));
			lastTuplet.addElement(currentNote);
			lastTuplet.setFigure(currentNote.getFigure());
			break;
		case "normal-notes":
			lastTuplet.setNormalNotesCount(Integer.parseInt(content));
			if (lastTuplet.isComplete()) {
				lastTuplet = null;
			} //TODO Normal-type and normal-dot
			break;
		case "stem":
			currentNote.setStemDirection(parseStemDir(content));
			break;
		case "notehead":
			currentNote.setNoteHead(content);
			break;
		case "notehead-text":
			currentNote.setNoteHeadText(content);
			break;
		case "staff":
			AMStaff staff = getOrCreateStaff(content);
			if (currentStaffPlaceHolder != null) {
				currentStaffPlaceHolder.setStaff(staff);
			} else if (currentNote != null) {
				currentNote.setStaff(getOrCreateStaff(content));
			} else {
				throw new ImportException("Expected a note or a place holder");
			}
			break;
		case "beam":
			if (content.equals("stop")) {
				currentBeams.remove(lastBeam.getNumber());
				lastBeam = null; // unimplementeed forward and backward hook and continue
			}
			break;
		case "syllabic":
			lastLyrics.setSyllabic(content);
			break;
		case "text":
			lastLyrics.setText(content);
			break;
		case "divisions": // measure.divisions
			currentDivisions = Integer.parseInt(content);
			break;
		case "fifths":
			lastKey.setFifths(Integer.parseInt(content));
			break;
		case "mode":
			lastKey.setMode(content);
			break;
		case "beats":
			lastTimeSignature.setBeats(content);
			break;
		case "beat-type":
			lastTimeSignature.setBeatType(content);
			break;
		case "sign":
			lastClef.setSign(content);
			break;
		case "line":
			lastClef.setLine(Integer.parseInt(content));
			break;			
		case "octave-change":
			lastClef.setOctaveChange(Integer.parseInt(content));
			break;
		}
	}

	private StemDirection parseStemDir(String stemDir) throws ImportException {
		if (stemDir == null) {
			return StemDirection.computed;
		} else if (stemDir.equals("up")) {
			return StemDirection.up;
		} else if (stemDir.equals("down")) {
			return StemDirection.down;
		} else {
			throw new ImportException("Invalid stem direction: " + stemDir);
		}
	}
	private Accidentals decodeAccidental(String content) throws ImportException {
		switch (content) {
		case "sharp":
			return Accidentals.SHARP;
		case "flat":
			return Accidentals.FLAT;
		case "natural":
			return Accidentals.NATURAL;
		case "double-sharp":
			return Accidentals.DOUBLE_SHARP;
		case "double-flat":
			return Accidentals.DOUBLE_FLAT;
		case "triple-flat":
			return Accidentals.TRIPLE_FLAT;
		default:
			throw new ImportException("Invalid accidental: " + content);
		}
	}

	@Override
	protected void doHandleOpenElement(String element, HashMap<String,String> attributes) throws ImportException {
		String ID;
		String type;
		String value;
		String number;
		AMStaff staff;
		
		switch (element) {
		case "score-timewise":
			throw new ImportException("Unsupported format: score-timewise");
		case "score-partwise":
			break;
		case "work": // score-partwise.work
			song.setWork(new AMWork());
			break;
		case "movement-title": // score-partwise.movement-title
		case "movement-number": // score-partwise.movement-number
			if (song.getMovement() == null) {
				song.setMovement(new AMMovement());
			}
			break;
		case "identification":// score-partwise.identification
			song.setIdentification(new AMIdentification());
			break;
		case "creator":// score-partwise.identification.creator
			// unimplemented score-partwise.identification subelements:
			// rights, encoding, source, relation, miscellaneous
			value = getAttribute(attributes, "type");
			expectedContentForElement.add(element, value);
			break;
		// unimplemented score-partwise subelements: defaults, credit
		case "part-group": // score-partwise.part-list.part-group
			// unimplemented all the other part-group subelements
			// (group-name-display...)
			type = getAttribute(attributes, "type");
			number = getAttribute(attributes, "number");
			if ("start".equals(type)) {
				AMPartGroup partGroup = new AMPartGroup(number);
				if (partGroups.isEmpty()) {
					song.addPartGroup(partGroup);
				} else {
					partGroups.peek().addSubgroup(partGroup);
				}
				partGroups.add(partGroup);
			} else if ("stop".equals(type)) {
				partGroups.pop();
			}
			break;
		case "part-list":
			break;
		case "score-part": // score-partwise.part-list.score-part
			currentScorePart = new AMPart(getOptionalAttribute(attributes, "id")); 
			song.addPart(currentScorePart);
			break;		
		// unimplemented score-partwise.part-list.score-part.identification
		case "part-name": // score-partwise.part-list.score-part.part-name
			break; // handled in handleElementContent
			// unimplemented rest of score-part subelements
		case "part":
			ID = getAttribute(attributes, "id");
			currentScorePart = song.getPart(ID);
			currentDivisions = null; 
			currentBeams = new HashMap<>();
			currentSlurs = new HashMap<>();
			currentTies = new HashMap<>();
			currentHairpin = null;
			currentTime = Time.TIME_ZERO;
			//lastDuration = 0;
			break;
		case "staff-details":
			number = getOptionalAttribute(attributes, "number");
			if (number == null) {
				number = "0";
			}
			lastStaff = getOrCreateStaff(number);
			break;
		case "measure":
			number = getOptionalAttribute(attributes, "number");
			currentMeasure = new AMMeasure(song.getNumberOfMeasures(), currentTime, number);
			song.addMeasure(currentMeasure);
			//20170217 currentScorePart.addElement(currentMeasure);
			break;
		case "direction":
			currentNote = null;
			currentStaffPlaceHolder = new AMStaffPlaceHolder(currentScorePart.getElements().size(), currentTime);
			currentScorePart.addElement(currentStaffPlaceHolder);
			break;
		case "note":
			currentStaffPlaceHolder = null;
			currentNote = new AMNoteOrRest(currentScorePart.getElements().size(), currentTime);
			currentScorePart.addElement(currentNote);
			context = eContexts.eNote;
			break;
		case "backup":
			context = eContexts.eBackup;
			break;
		case "forward":
			context = eContexts.eForward;
			break;
		case "grace":
			currentNote.setGraceNote(true);
			// unimplemented attributes steal-time or make-time
			String slash = getOptionalAttribute(attributes, "slash");
			currentNote.setSlashedGraceNote(slash != null && slash.equals("true"));
			break;
		case "chord":
			currentScorePart.mergeLastNoteWithPreviousIntoChord();
			context = eContexts.eChord;
			break;
		case "rest":
			currentNote.setRest(true);			
			break;
			// not implemented display-step and octave
		case "unpitched":
			// unimplemented
			showUnimplemented(element);
			break;
		case "cue":
			currentNote.setCueNote(true);
			break;
			// element instrument not implemented
			// editorial layer not implemented
		case "dot":
			currentNote.addDot(); 
			break; // unimplemented print-style and placement of dots
		case "accidental":
			lastAccidental = new AMAccidental();
			String cautionary = getOptionalAttribute(attributes, "cautionary");
			if (cautionary != null) {
				lastAccidental.setCautionary(parseYesOrNo("cautionary", cautionary));
			}
			String editorial = getOptionalAttribute(attributes, "editorial");
			if (editorial != null) {
				lastAccidental.setEditorial(parseYesOrNo("editorial", editorial));
			}
			break;
		case "beam":
			number = getAttribute(attributes, "number");
			
			lastBeam = currentBeams.get(number);
			if (lastBeam == null) {
				lastBeam = new AMBeam(number);
				currentBeams.put(number, lastBeam);
			} 
			String repeater = getOptionalAttribute(attributes, "repeater");
			if (repeater != null) {
				lastBeam.setRepeater(parseYesOrNo("repeater", repeater));
			}
			lastBeam.addNoteOrChord(currentNote);
			break;
		case "tie": // duration
			handleTie(element, attributes); // sometimes both are present
			// unimplemented time-only			
			break;
		case "tied": // visual
			handleTie(element, attributes);			
			break;
		case "slur":
			number = getOptionalAttribute(attributes, "number");
			if (number == null) {
				number = "Unkown";
			}
			type = getAttribute(attributes, "type");
			//System.out.println("SLur " + number + " type " + type);
			PositionAboveBelow position;
			String placement = getOptionalAttribute(attributes, "placement");
			String orientation = getOptionalAttribute(attributes, "orientation");
			if (placement == null && orientation == null) {
				position = PositionAboveBelow.UNDEFINED;
			} else if (orientation != null) {
				position = getPositionFromOrientation(orientation);
			} else {
				// placement != null
				position = getPositionFromPlacement(placement);				
			}
			
			AMSlur slur = currentSlurs.get(number);
			if (slur == null) {
				slur = new AMSlur();	
				slur.setPlacement(position);
				if (!type.equals("start")) {
					throw new ImportException("Unexpected slur type '" + type + "', expected 'start'");
				}
				currentSlurs.put(number, slur);
				currentNote.addConnector(slur);
				slur.setFrom(currentNote);
			} else {
				if (type.equals("start")) {
					throw new ImportException("Unexpected slur type '" + type + "', expected 'stop' or 'continue'");
				} else if (type.equals("stop")) {
					slur.setTo(currentNote);
					currentNote.addConnector(slur);
					currentScorePart.addConnector(slur);		
					currentSlurs.remove(number);
				} else {
					throw new ImportException("Unimplemented slur type 'continue'");
				}				
			}
			break; // unimplemented bezier...
		case "wedge":
			if (currentStaffPlaceHolder == null) {
				throw new ImportException("Uninitialized currentStaffPlaceHolder ");
			}
			type = getAttribute(attributes, "type");
			if (type.equals("stop")) {
				if (currentHairpin == null) {
					throw new ImportException("Missing a starting wedge");
				} else {
					currentStaffPlaceHolder.addConnector(currentHairpin);
					currentHairpin.setTo(currentStaffPlaceHolder);
					currentScorePart.addConnector(currentHairpin);
					currentHairpin = null;
				}
			} else {
				if (currentHairpin != null) {
					throw new ImportException("Other wedge was started but not finished yet");
				}
				AMHairpin hairpin;
				if (type.equals("crescendo")) {
					hairpin = new AMHairpinCrescendo();
				} else if (type.equals("diminuendo")) {
					hairpin = new AMHairpinDiminuendo();
				} else {
					throw new ImportException("Invalid wedge type: '" + type + "'");
				}
				hairpin.setFrom(currentStaffPlaceHolder);
				currentStaffPlaceHolder.addConnector(hairpin);
				currentHairpin = hairpin;
			}
			break;
		case "tuplet":
			showUnimplemented(element);
			break;
			//TODO ornaments, technical, articulations
		case "p":
		case "pp":
		case "ppp":
		case "f":
		case "ff":
		case "fff":
		case "mp":
		case "mf":
		case "sf":
		case "sfp":
		case "pppp":
		case "ppppp":
		case "ffff":
		case "fffff":
		case "sfpp":
		case "fp":
		case "rf":
		case "rfz":
		case "sfz":
		case "sfzz":
		case "fz":
			if (currentStaffPlaceHolder != null) {
				currentStaffPlaceHolder.addMarker(new AMDynamics(element, currentTime));
			} else if (currentNote != null) {
				currentNote.addMarker(new AMDynamics(element, currentTime));
			} else {
				throw new ImportException("No current staff holder or current note");
			}
			break;
		case "fermata":
			type = getOptionalAttribute(attributes, "type");
			AMFermata fermata = new AMFermata();
			fermata.setPosition(getPositionForFermata(type));
			currentNote.addMarker(fermata);
			break;
		case "lyric":
			lastLyrics = new AMLyrics();
			number = getOptionalAttribute(attributes, "number");
			if (number == null) {
				number = "Unkown";
			}			
			currentNote.addLyrics(number, lastLyrics);
			break;
			// unimplemented note.play
		case "cancel":
			showUnimplemented(element);
			break;
		case "key":
			lastKey = new AMKey(currentScorePart.getElements().size(), currentTime);
			currentScorePart.addElement(lastKey);
			break;
		case "transpose":
			throw new ImportException("Transpose");
			//break;
		case "time":
			String symbol = getOptionalAttribute(attributes, "symbol");
			lastTimeSignature = new AMTimeSignature(currentScorePart.getElements().size(), currentTime);
			currentScorePart.addElement(lastTimeSignature);
			if (symbol != null) {
				lastTimeSignature.setSymbol(symbol);
			}
			break;
		case "clef":
			number = getOptionalAttribute(attributes, "number");			
			lastClef = new AMClef(currentScorePart.getElements().size(), currentTime);
			currentScorePart.addElement(lastClef);
			if (number != null) {
				staff = getOrCreateStaff(number);
				lastClef.setStaff(staff);
			}
			break;
			// unimplemented: harmony, figured-bass, print, barline, grouping
		//default:
		//	Logger.getLogger(MusicXMLSAXImporterAbstractModel.class.getName()).log(Level.INFO, "Unimplemented element {0}", element);
		}
	}
		

	@Override
	protected void handleElementClose(String closingElement) {
		switch (closingElement) {
		case "direction":
			currentStaffPlaceHolder = null;
			break;
		}
	}
	
}
