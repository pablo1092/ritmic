package es.ua.dlsi.im3.core.score.io;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.util.List;

import org.junit.Before;
import org.junit.Test;

import es.ua.dlsi.im3.TestFileUtils;
import es.ua.dlsi.im3.core.score.Accidentals;
import es.ua.dlsi.im3.core.score.AtomFigure;
import es.ua.dlsi.im3.core.score.AtomPitch;
import es.ua.dlsi.im3.core.score.Figures;
import es.ua.dlsi.im3.core.score.PitchClasses;
import es.ua.dlsi.im3.core.score.ScoreSong;
import es.ua.dlsi.im3.core.score.io.mei.MEISongExporter;
import es.ua.dlsi.im3.core.score.io.mei.MEISongImporter;
import es.ua.dlsi.im3.core.score.io.musicxml.MusicXMLImporter;
import es.ua.dlsi.im3.io.ImportException;

/**
 * MusicXML and MEI common tests
 * @author drizo
 */
public class XMLExporterImporterTest {
	
	@Before
	public void setUp() throws Exception {
	}

	public ScoreSong importMEI(File file) throws ImportException {
		MEISongImporter importer = new MEISongImporter();
		ScoreSong song = importer.importSong(file);
		return song;
	}
	
	public ScoreSong importMusicXML(File file) throws ImportException {
		MusicXMLImporter importer = new MusicXMLImporter();
		ScoreSong song = importer.importSong(file);
		return song;
	}
	
	private void assertSingle1(ScoreSong song, String phase) throws Exception {
		assertEquals(phase, 1, song.getParts().size());
		assertEquals(phase, 1, song.getKeys().size());
		assertEquals(phase, Accidentals.SHARP, song.getFirsKey().getAccidental());
		assertEquals(phase, 2, song.getFirsKey().getAlteredNoteNames().length);
		assertEquals(phase, 1, song.getMeters().size());
		assertEquals(phase, 4, song.getFirstMeter().getNumerator());
		assertEquals(phase, 4, song.getFirstMeter().getDenominator());
		assertEquals(phase, 2, song.getBarCount());
		List<AtomFigure> atomFigures = song.getParts().get(0).getUniqueVoice().getAtomFigures();		
		Figures [] expectedFigs = {Figures.WHOLE, Figures.QUARTER, Figures.QUARTER, Figures.EIGHTH,
				Figures.EIGHTH, Figures.QUARTER};
		assertEquals(phase, expectedFigs.length, atomFigures.size());
				
		for (int i=0; i<expectedFigs.length; i++) {
			assertEquals(phase, expectedFigs[i], atomFigures.get(i).getFigure());
		}

		PitchClasses [] expectedPitchClasses = {PitchClasses.G, PitchClasses.F_SHARP, PitchClasses.G_SHARP,
				PitchClasses.A
		};
		int [] expectedOctaves = {4,4,4,5};
		List<AtomPitch> atomPitches = song.getParts().get(0).getUniqueVoice().getAtomPitches();
		assertEquals(phase, expectedPitchClasses.length, atomPitches.size());
		for (int i=0; i<expectedPitchClasses.length; i++) {
			assertEquals(phase, expectedPitchClasses[i].getPitchClass(), atomPitches.get(i).getScientificPitch().getPitchClass());
			assertEquals(phase + " i=" + i, expectedOctaves[i], atomPitches.get(i).getScientificPitch().getOctave());
		}
		
		assertTrue(atomFigures.get(2).isRest());
		assertTrue(phase, atomFigures.get(4).isRest());
		
	}
	
	private void doTestSingle1(ScoreSong song) throws Exception {
		assertSingle1(song, "Import");		
		MEISongExporter exporter = new MEISongExporter();
		File file = File.createTempFile("export", "mei");
		//File file = new File("/tmp/a.mei");
		exporter.exportSong(file, song);
		assertSingle1(importMEI(file), "exported");
	}
	
	@Test
	public void testSingle1() throws Exception {
		doTestSingle1(importMEI(TestFileUtils.getFile("/testdata/score/io/simple1.mei")));
		doTestSingle1(importMusicXML(TestFileUtils.getFile("/testdata/score/io/simple1.xml")));
	}
	
}
