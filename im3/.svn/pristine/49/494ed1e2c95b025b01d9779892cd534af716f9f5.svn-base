/*
 * Copyright (C) 2013 David Rizo Valero
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package es.ua.dlsi.im3.core.score;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.NavigableMap;
import java.util.TreeMap;

import es.ua.dlsi.im3.IM3Exception;
import es.ua.dlsi.im3.adt.IndexedMap;

/**
 * It is just a visual holder for elements. The note, chord and rest sequences are stored in ScoreLayer,
 * the meters in song. The key signatures, for being able to represent transposing instruments are stored
 * here
 *
 * @author drizo
 */
public abstract class Staff extends VerticalScoreDivision {
	/**
	 * The staff belongs either to a page or is grouped into a system
	 */
	private StaffSystem parentSystem;

	protected int lines;

	/**
	 * Used to be able to quick locate a clef given a time. 
	 */
	TreeMap<Time, Clef> clefs;
	/**
	 * This is the only place there the key signatures are stored
	 */
	TreeMap<Time, KeySignature> keySignatures;
	/**
	 * This is the visual representation of meters. Note, for example, that a score may contain
	 * a staff with mensural notation and other with its transcription in modern notation. Both
	 * have the same meter, but different notations
	 */
	TreeMap<Time, TimeSignature> timeSignatures;
	
	/**
	 * Notes, rests, chords, time signatures, key signatures, clefs, barlines 
	 * The order by time is not guaranteed here. It contains the time signatures, clefs, and key signatures as well 
	 */
	ArrayList<ITimedElementInStaff> coreSymbols;

	protected IndexedMap<ScoreLyricVerse> lyricVerses;
	
	protected IndexedMap<ScoreAnalysisKind> analysisKinds;

	/**
	 * The key corresponds to the time it is set, the value is the set of ledger
	 * lines
	 */
	protected TreeMap<Time, LedgerLines> ledgerLines;
	protected TreeMap<Time, Fermate> fermate;
	
	/**
	 * Ledger lines are stored here as well. They are store in the ledgerLines tree map for speed up
	 * purposes
	 */
	private final ArrayList<StaffMark> marks; // ledger lines are inserted here
												// as
												// well in order to deal with
												// layout
	private final ArrayList<Attachment<?>> attachments;
	
	private boolean ossia;

	/**
	 * Voices it contains. Note that when we have an 4 octaves scale that has 2 scales in one staff 
	 * and other 2 in other one, it is split in two layers. 
	 * For occasional staff changes of one note N, N is mantained in the voice and its value staffChange modified     
	 */
	private final ArrayList<ScoreLayer> layers;
	/**
	 *
	 * @param firstPart
	 * @param hierarchicalOrder
	 *            The ordering in the score. It is absolute, even though they
	 *            are inside a group
	 * @param numberIdentifier
	 * @param nlines
	 */
	public Staff(ScoreSong song, String hierarchicalOrder, int numberIdentifier,
			int nlines) {
		super(song, hierarchicalOrder, numberIdentifier);
		init(nlines);
		ledgerLines = new TreeMap<>();
		fermate = new TreeMap<>();
		this.marks = new ArrayList<>();
		this.attachments = new ArrayList<>();
		ossia = false;
		layers = new ArrayList<>();
		// mainLayer = this.addLayer();
	}

	private void init(int nlines) {
		this.lines = nlines;
		this.clefs = new TreeMap<>();
		this.timeSignatures = new TreeMap<>();
		this.keySignatures = new TreeMap<>();
		this.barLines = new TreeMap<>();
	}

	// ----------------------------------------------------------------------
	// ----------------------- General --------------------------------
	// ----------------------------------------------------------------------
	public StaffSystem getParentSystem() {
		return parentSystem;
	}

	// ----------------------------------------------------------------------
	// ----------------------- Children: actually this one
	// --------------------------------
	// ----------------------------------------------------------------------
	@Override
	public Staff getTopStaff() {
		return this;
	}

	@Override
	public Staff getBottomStaff() {
		return this;
	}

	@Override
	public List<Staff> getContainedStaves() {
		ArrayList<Staff> result = new ArrayList<>();
		result.add(this);
		return result;
	}

	// ----------------------------------------------------------------------	
	// Layers
	// 
	// ----------------------------------------------------------------------
	
	// ----------------------------------------------------------------------
	// ----------------------- Fermate --------------------------------
	// ----------------------------------------------------------------------
	public TreeMap<Time, Fermate> getFermate() {
		return fermate;
	}

	public void addFermata(AtomFigure snr, PositionAboveBelow position) throws IM3Exception {
		Fermate f = fermate.get(snr.getTime());
		if (!fermate.containsKey(snr.getTime())) {
			f = new Fermate(getNotationType(), this, snr, position);
			fermate.put(snr.getTime(), f);
			this.addMark(f);
		} else {
			f.addDurationalSymbol(snr, position);
		}
	}

	// ----------------------------------------------------------------------
	// ----------------------- Ledger lines --------------------------------
	// ----------------------------------------------------------------------
	public int getLineCount() {
		return this.lines;
	}

	public TreeMap<Time, LedgerLines> getLedgerLines() {
		return ledgerLines;
	}

	public LedgerLines getLedgerLineOrNullFor(AtomFigure snr) throws IM3Exception {
		return ledgerLines.get(snr.getTime());
	}

	public void addNecessaryLedgerLinesFor(AtomFigure snr, int lineSpace) throws IM3Exception {
		int nLedgerLines = computeNumberLedgerLinesNeeded(lineSpace);
		if (nLedgerLines != 0) {
			addLedgerLines(snr, nLedgerLines > 0 ? nLedgerLines : -nLedgerLines,
					nLedgerLines > 0 ? PositionAboveBelow.BELOW : PositionAboveBelow.ABOVE);
		}
	}

	private int computeNumberLedgerLinesNeeded(int lineSpace) {
		if (lineSpace < 0) {
			return -lineSpace / 2;
		} else if (lineSpace > (lines - 1) * 2) {
			return -(lineSpace - (lines - 1) * 2) / 2;
		} else {
			return 0;
		}
	}

	public void addLedgerLines(AtomFigure snr, int numberOfLines, PositionAboveBelow position) throws IM3Exception {
		if (numberOfLines != 0) {
			LedgerLines ll = this.ledgerLines.get(snr.getTime());
			if (ll == null) {
				LedgerLines object = new LedgerLines(this, snr, numberOfLines, position);
				ledgerLines.put(snr.getTime(), object);
				this.addMark(object);
			} else {
				ll.addScoreNonRest(snr, numberOfLines, position);
			}
		}
	}

	// ----------------------------------------------------------------------
	// ----------------------- Lyric verses and analysis kinds --------------
	// ----------------------------------------------------------------------

	public ScoreLyricVerse createAndAddScoreLyrics() throws IM3Exception {
		ScoreLyricVerse sl = new ScoreLyricVerse(lyricVerses.size() + 1, this);
		addLyrics(sl);
		return sl;
	}

	public void addLyrics(ScoreLyricVerse sl) throws IM3Exception {
		if (sl == null) {
			throw new IM3Exception("The score lyrics parameter is null");
		}
		lyricVerses.addItem(sl);
	}

	public Collection<ScoreLyricVerse> getAllLyrics() {
		return lyricVerses.getAllItems().values();
	}

	public void removeScoreLyrics(ScoreLyricVerse ssl) {
		lyricVerses.removeItem(ssl);
	}

	public Collection<ScoreAnalysisKind> getAllAnalysisKinds() {
		return analysisKinds.getAllItems().values();
	}

	public void addAnalysisKind(ScoreAnalysisKind ak) throws IM3Exception {
		analysisKinds.addItem(ak);
	}

	/**
	 *
	 * @param number
	 * @return null if not exists
	 */
	public ScoreLyricVerse getLyrics(int number) {
		return lyricVerses.getItem(number);
	}

	// ----------------------------------------------------------------------
	// ----------------------- Background data: clefs, signatures ....
	// --------------------
	// ----------------------------------------------------------------------
	public Clef getRunningClefAt(ITimedElement symbol) throws IM3Exception {
		// The treeset with all clefs ordered by onsets is built after
		// computeOnsets
		Map.Entry<Time, Clef> c = this.clefs.floorEntry(symbol.getTime());
		if (c == null) {
			throw new IM3Exception(
					"There is no clef set at symbol " + symbol.toString() + " at time  " + symbol.getTime());
		}
		return c.getValue();
	}

	public Clef getRunningClefAt(Time time) throws IM3Exception {
		// The treeset with all clefs ordered by onsets is built after
		// computeOnsets
		Map.Entry<Time, Clef> c = this.clefs.floorEntry(time);
		if (c == null) {
			throw new IM3Exception("There is no clef set at time  " + time);
		}
		return c.getValue();
	}

	public Collection<Clef> getClefs() {
		return this.clefs.values();
	}

	public Collection<TimeSignature> getTimeSignatures() {
		return this.timeSignatures.values();
	}

	public Collection<KeySignature> getKeySignatures() {
		return this.keySignatures.values();
	}

	public Collection<Barline> getBarlines() {
		return this.barLines.values();
	}

	/**
	 * @param time
	 * @return null if none
	 */
	public Clef getClefAtTime(Time time) {
		return this.clefs.get(time);
	}

	/**
	 * @param time
	 * @return null if none
	 */
	public TimeSignature getTimeSignatureAtTime(Time time) {
		return this.timeSignatures.get(time);
	}

	/**
	 * @param time
	 * @return null if none
	 */
	public KeySignature getKeySignatureAtTime(Time time) {
		return this.keySignatures.get(time);
	}

	/**
	 * @param time
	 * @return null if none
	 */
	public Barline getBarlineAtTime(Time time) {
		return this.barLines.get(time);
	}

	public NavigableMap<Time, Barline> getBarlinesAfter(Time time) {
		return this.barLines.tailMap(time, false);
	}

	public TimeSignature getRunningTimeSignatureAt(ITimedElement symbol) throws IM3Exception {
		// The treeset with all clefs ordered by onsets is built after
		// computeOnsets
		Map.Entry<Time, TimeSignature> c = this.timeSignatures.floorEntry(symbol.getTime());
		if (c == null) {
			throw new IM3Exception(
					"There is no time signature set at symbol " + symbol.toString() + " at time " + symbol.getTime());
		}
		return c.getValue();
	}

	public KeySignature getRunningKeySignatureAt(ITimedElement symbol) throws IM3Exception {
		// The treeset with all clefs ordered by onsets is built after
		// computeOnsets
		Map.Entry<Time, KeySignature> c = this.keySignatures.floorEntry(symbol.getTime());
		if (c == null) {
			throw new IM3Exception(
					"There is no time signature set at symbol " + symbol.toString() + " at time " + symbol.getTime());
		}
		return c.getValue();
	}

	public TimeSignature getRunningTimeSignatureAt(Time time) throws IM3Exception {
		// The treeset with all clefs ordered by onsets is built after
		// computeOnsets
		Map.Entry<Time, TimeSignature> c = this.timeSignatures.floorEntry(time);
		if (c == null) {
			throw new IM3Exception("There is no time signature set at time " + time);
		}
		return c.getValue();
	}

	public KeySignature getRunningKeySignatureAt(Time time) throws IM3Exception {
		// The treeset with all clefs ordered by onsets is built after
		// computeOnsets
		Map.Entry<Time, KeySignature> c = this.keySignatures.floorEntry(time);
		if (c == null) {
			throw new IM3Exception("There is no key signature set at time " + time);
		}
		return c.getValue();
	}

	public KeySignature getRunningKeySignatureOrNullAt(Time time) throws IM3Exception {
		// The treeset with all clefs ordered by onsets is built after
		// computeOnsets
		Map.Entry<Time, KeySignature> c = this.keySignatures.floorEntry(time);
		if (c == null) {
			return null;
		} else {
			return c.getValue();
		}
	}

	/**
	 * Invoked from StaffLayer when the symbol is added is a clef or directly
	 *
	 * @param clef
	 * @throws es.ua.dlsi.im3.IM3Exception.IM2Exception
	 */
	public void addClef(Clef clef) throws IM3Exception {
		this.clefs.put(clef.getTime(), clef);
	}

	public void addTimeSignature(TimeSignature ts) throws IM3Exception {
		this.timeSignatures.put(ts.getTime(), ts);
	}

	public void addKeySignature(KeySignature ts) throws IM3Exception {
		this.keySignatures.put(ts.getTime(), ts);
	}

	// ----------------------------------------------------------------------
	// ----------------------- Notation symbols --------------------------------
	// ----------------------------------------------------------------------
	/**
	 *
	 * @param fromTime
	 *            inclusive
	 * @param toTime
	 *            exclusive
	 * @return
	 * @throws IM3Exception 
	 */
	public List<ITimedElementInStaff> getCoreSymbolsOrderedWithOnsets(Time fromTime, Time toTime) throws IM3Exception {
		ArrayList<ITimedElementInStaff> symbols = new ArrayList<>();
		for (ITimedElementInStaff cs: coreSymbols) { //TODO Speed up? 
			if (fromTime.compareTo(cs.getTime()) >= 0 && cs.getTime().compareTo(toTime) < 0) {
				symbols.add(cs);
			}
		}
		SymbolsOrderer.sortList(symbols);
		return symbols;
	}

	/**
	 *
	 * @param fromTime
	 *            inclusive
	 * @param toTime
	 *            exclusive
	 * @return
	 */
	public List<ITimedElementInStaff> getCoreSymbolsOrdered() {
		ArrayList<ITimedElementInStaff> symbols = new ArrayList<>(coreSymbols);
		SymbolsOrderer.sortList(symbols);
		return symbols;
	}	
	public void addMark(StaffMark mark) throws IM3Exception {
		this.marks.add(mark);
	}

	public void addAttachment(Attachment<?> attachment) {
		this.attachments.add(attachment);
	}

	public ArrayList<StaffMark> getMarks() {
		return marks;
	}

	public ArrayList<Attachment<?>> getAttachments() {
		return attachments;
	}
	
	public void addCoreSymbol(ITimedElementInStaff e) {
		this.coreSymbols.add(e);
	}

	// ----------------------------------------------------------------------
	// ----------------------- Accidental processing-------------------------
	// ----------------------------------------------------------------------
	/*FRACCIONES private Accidentals computeRequiredAccidental(TreeMap<NoteNames, PitchClass> alteredSet, PitchClass pc) {
		// needs accidental?
		Accidentals requiredAccidental = null;
		PitchClass pcInKey = alteredSet.get(pc.getNoteName());
		if (pcInKey != null) { // altered note name in key signature
			if (!pc.equals(pcInKey)) { // alteration not valid for this pitch
										// class
				if (pc.getAccidental() == null || pc.getAccidental() == Accidentals.NATURAL) {
					requiredAccidental = Accidentals.NATURAL;
				} else {
					requiredAccidental = pc.getAccidental(); // either flat or
																// sharp
				}
			}
		} else if (pc.getAccidental() != null && pc.getAccidental() != Accidentals.NATURAL) {
			requiredAccidental = pc.getAccidental(); // either flat or sharp
		}
		return requiredAccidental;
	}*/

	/**
	 *
	 * Browse from left to right and set the required accidentals for each note
	 * depending on the current key signature and previous accidentals
	 *
	 * @param fromTime
	 *            inclusive
	 * @param toTime
	 *            exclusive
	 * @return
	 */
	/*FRACCIONES public void createNoteAccidentals(Time fromTime, Time toTime) throws IM3Exception {
		List<ISymbolInLayer> symbols = getNotationSymbolsOrdered(fromTime, toTime);
		TreeMap<NoteNames, ScientificPitch> alteredNoteNamesInBar = new TreeMap<>();
		TreeMap<NoteNames, PitchClass> alteredNoteNamesInKeySignature = new TreeMap<>();
		KeySignature currentKeySignature = null; // getRunningKeySignatureAt(fromTime);

		// alteredNoteNamesInKeySignature =
		// currentKeySignature.getScoreElement().getAlteredNoteNamesSet();

		for (ISymbolInLayer symbol : symbols) {
			if (symbol instanceof Barline) {
				alteredNoteNamesInBar.clear();
			} else if (symbol instanceof KeySignature) {
				currentKeySignature = (KeySignature) symbol;
				alteredNoteNamesInKeySignature = currentKeySignature.getScoreElement().getAlteredNoteNamesSet();
			} else if (symbol instanceof ScoreNote) {
				NotePitchSymbolElement ps = ((ScoreNote) symbol).getPitchSymbol();
				computeRequiredAccidentalsForPitch(alteredNoteNamesInBar, alteredNoteNamesInKeySignature, ps);
			} else if (symbol instanceof ScoreChord) {
				TreeSet<NotePitchSymbolElement> spitches = ((ScoreChord) symbol).getScorePitchElements();
				for (NotePitchSymbolElement ps : spitches) {
					computeRequiredAccidentalsForPitch(alteredNoteNamesInBar, alteredNoteNamesInKeySignature, ps);
				}
			}
		}

	}

	void computeRequiredAccidentalsForPitch(TreeMap<NoteNames, ScientificPitch> alteredNoteNamesInBar,
			TreeMap<NoteNames, PitchClass> alteredNoteNamesInKeySignature, NotePitchSymbolElement ps)
			throws NotationException {
		ScientificPitch pc = ps.getScorePitch().getPitch();
		if (!alteredNoteNamesInBar.containsValue(pc)) { // if not previously
														// altered
			Accidentals requiredAccidental = computeRequiredAccidental(alteredNoteNamesInKeySignature,
					pc.getPitchClass());
			if (requiredAccidental != null) {
				if (ps.getAccidentalSymbol() != null
						&& !ps.getAccidentalSymbol().getAccidental().equals(requiredAccidental)) {
					ps.removeSymbolElement(ps.getAccidentalSymbol());
				}
				if (ps.getAccidentalSymbol() == null) {
					alteredNoteNamesInBar.put(pc.getPitchClass().getNoteName(), pc);
					ps.setAccidental(requiredAccidental);
				} // else it is already the one we need
			}
		}
	}*/

	//TODO Speed up
	/*FRACCIONES public Time getDuration() throws IM3Exception {
		Time maxDur = Time.TIME_ZERO;
		for (StaffLayer layer : layers.values()) {
			maxDur = Time.max(maxDur, layer.getDuration());
		}
		return maxDur;
	}*/

	public abstract boolean isPitched();

	public final boolean isOssia() {
		return ossia;
	}

	public final void setOssia(boolean ossia) {
		this.ossia = ossia;
	}

	public void addLayer(ScoreLayer layer) {
		this.layers.add(layer);		
	}

	public final List<ScoreLayer> getLayers() {
		return layers;
	}
	

	
	/*public Collection<? extends ISymbolInLayer> getSymbolsOrderdInTime() {
		ArrayList<ISymbolInLayer> result = new ArrayList<>();
		for (StaffLayer layer : layers.values()) {
			result.addAll(layer.getSymbols());
		}
		Collections.sort(result, new Comparator<ISymbolInLayer>() {

			@Override
			public int compare(ISymbolInLayer o1, ISymbolInLayer o2) {
				int diff;
				try {
					diff = o1.getTime().compareTo(o2.getTime());
				} catch (IM3Exception e) {
					throw new IM3RuntimeException("Cannot compare elements without time: "  + e);
				}
				if (diff == 0) {
					diff = o1.hashCode() - o2.hashCode();
				}
				return diff;
			}
			
		});
		return result;
	}*/
	
}
