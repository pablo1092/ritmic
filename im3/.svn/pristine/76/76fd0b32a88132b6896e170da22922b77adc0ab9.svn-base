/*
 * Copyright (C) 2015 David Rizo Valero
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package es.ua.dlsi.im3.core.score;

import java.util.HashMap;

import es.ua.dlsi.im3.IM3Exception;

/**
 *
 * @author drizo
 * @param <NotationSymbolType>
 */
public abstract class TimedElementWithNotationInStaves<NotationSymbolType extends ITimedElement>
		implements ITimedElement, IUniqueIDObject {
	ScoreSong song;
	protected Time time;
	HashMap<Staff, NotationSymbolType> notationSymbols;
	private String ID;

	public ScoreSong getSong() {
		return song;
	}

	/**
	 * The responsability of adding the element to the song is in the song
	 * 
	 * @param asong
	 * @throws es.ua.dlsi.im3.IM3Exception.IM2Exception
	 */
	public void setSong(ScoreSong asong) throws IM3Exception {
		if (this.song != null && this.song != asong) {
			throw new IM3Exception("Cannot set a timed element into two different songs");
		}
		this.song = asong;
	}

	@Override	
	public Time getTime() throws IM3Exception {
		if (this.time == null) {
			throw new IM3Exception("Missing time in " + getClass());
		}
		return this.time;
	}
	
	@Override
	public boolean hasTime() {
		return this.time != null;
	}
	
	public final void setTime(Time time) {
		this.time = time;
	}
	
	/**
	 * 
	 * @param staff
	 * @return null if already existed
	 */
	public NotationSymbolType addNotation(NotationType notationType, Staff staff) throws IM3Exception {
		if (notationSymbols == null) {
			notationSymbols = new HashMap<>();
		}
		if (!notationSymbols.containsKey(staff)) {
			NotationSymbolType notation = createNotation(notationType, staff);
			//this.notationSymbols.put(staff, notation); // already set by constructor that invokes setNotation 
			return notation;
		} else {
			return null;
		}
	}
	
	public void setNotation(NotationSymbolType nst, Staff staff) {
		if (notationSymbols == null) {
			notationSymbols = new HashMap<>();
		}
		this.notationSymbols.put(staff, nst);
	}

	public void removeNotation(Staff staff) {
		this.notationSymbols.remove(staff);
	}

	protected abstract NotationSymbolType createNotation(NotationType notationType, Staff staff) throws IM3Exception;

	public NotationSymbolType getNotation(Staff staff) {
		return notationSymbols.get(staff);
	}
	@Override
	public String __getID() {
		return ID;
	}

	@Override
	public void __setID(String id) {
		this.ID = id;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((time == null) ? 0 : time.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TimedElementWithNotationInStaves<?> other = (TimedElementWithNotationInStaves<?>) obj;
		if (time == null) {
			if (other.time != null)
				return false;
		} else if (!time.equals(other.time))
			return false;
		return true;
	}
	
	
}
