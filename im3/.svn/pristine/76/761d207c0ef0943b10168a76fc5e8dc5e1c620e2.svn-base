/*
 * Copyright (C) 2013 David Rizo Valero
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package es.ua.dlsi.im3.core.score.staves;

import es.ua.dlsi.im3.IM3Exception;
import es.ua.dlsi.im3.IM3RuntimeException;
import es.ua.dlsi.im3.core.score.ScoreAnalysisHook;
import es.ua.dlsi.im3.core.score.ScorePart;
import es.ua.dlsi.im3.core.score.Staff;
import es.ua.dlsi.im3.core.score.StaffAnalysisLayer;
import es.ua.dlsi.im3.core.score.Time;

/**
 * The layer that contains all analysis hooks is the hooks layer
 * @author drizo
 */
public class AnalysisStaff extends Staff {	
	StaffAnalysisLayer hooksLayer;
	
	public AnalysisStaff(ScorePart firstPart, String hierarchicalOrder,
			int numberIdentifier) {
		super(firstPart, hierarchicalOrder, numberIdentifier, 1);
		init();
	}

	private void init() {
		hooksLayer = new StaffAnalysisLayer(this, Integer.MAX_VALUE);
		try {
			this.addLayer(hooksLayer);
		} catch (IM3Exception e) {
			throw new IM3RuntimeException("Unexpected error", e);
		}		
	}
	
	public StaffAnalysisLayer getHooksLayer() {
		return hooksLayer;
	}

	public ScoreAnalysisHook findAnalysisHookWithOnset(Time time) throws IM3Exception {
		return hooksLayer.findAnalysisHookWithOnset(time);
		/*
		for (StaffLayer staffLayer : layers.values()) {
			for (CoreSymbol cs : staffLayer.getCoreSymbols()) {
				if (cs instanceof ScoreAnalysisHook) {
					if (cs.getTime() == time) {
						return (ScoreAnalysisHook) cs;
					}
				}
			}
		}
		throw new NotationException("Cannot find an analysis hook with time " + time);*/
	}
	/**
	 * It locates the last hook that is located just before or equals the onset
	 * @param time
	 * @return
	 * @throws IM3Exception
	 * @throws NotationException
	 */
	public ScoreAnalysisHook findLastAnalysisHookBeforeOrEqualsOnset(Time time) throws IM3Exception {
		return hooksLayer.findLastAnalysisHookBeforeOrEqualsOnset(time);
	}	

	/**
	 * It locates the last hook that is located just after or equals the onset
	 * @param time
	 * @return
	 * @throws IM3Exception
	 * @throws NotationException
	 */
	public ScoreAnalysisHook findLastAnalysisHookAfterOrEqualsOnset(Time time) throws IM3Exception {
		return hooksLayer.findLastAnalysisHookAfterOrEqualsOnset(time);
	}		
	
	@Override
	public boolean isPitched() {
		return false;
	}

	public boolean hasAnalysisHooks() throws IM3Exception {
		return hooksLayer.hasAnalysisHooks();
	}

	public ScoreAnalysisHook findLastAnalysisHook() {
		return hooksLayer.findLastAnalysisHook();
	}

	@Override
	public String __getIDPrefix() {
		return "AS";
	}

}
