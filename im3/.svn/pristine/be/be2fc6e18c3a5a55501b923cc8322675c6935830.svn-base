package es.ua.dlsi.im3.core.score.io.mei;

import java.io.File;
import java.io.PrintStream;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;

import es.ua.dlsi.im3.IM3Exception;
import es.ua.dlsi.im3.core.score.Accidentals;
import es.ua.dlsi.im3.core.score.AtomContinuationPitch;
import es.ua.dlsi.im3.core.score.AtomFigure;
import es.ua.dlsi.im3.core.score.AtomPitch;
import es.ua.dlsi.im3.core.score.Bar;
import es.ua.dlsi.im3.core.score.Beam;
import es.ua.dlsi.im3.core.score.Clef;
import es.ua.dlsi.im3.core.score.Connector;
import es.ua.dlsi.im3.core.score.DynamicMark;
import es.ua.dlsi.im3.core.score.Figures;
import es.ua.dlsi.im3.core.score.ISymbolWithConnectors;
import es.ua.dlsi.im3.core.score.ITimedElement;
import es.ua.dlsi.im3.core.score.IUniqueIDObject;
import es.ua.dlsi.im3.core.score.Key;
import es.ua.dlsi.im3.core.score.LedgerLines;
import es.ua.dlsi.im3.core.score.Meter;
import es.ua.dlsi.im3.core.score.NoMeterException;
import es.ua.dlsi.im3.core.score.ScientificPitch;
import es.ua.dlsi.im3.core.score.ScoreSong;
import es.ua.dlsi.im3.core.score.Slur;
import es.ua.dlsi.im3.core.score.Staff;
import es.ua.dlsi.im3.core.score.StaffLayer;
import es.ua.dlsi.im3.core.score.StaffMark;
import es.ua.dlsi.im3.core.score.StaffTimedPlaceHolder;
import es.ua.dlsi.im3.core.score.Tie;
import es.ua.dlsi.im3.core.score.Time;
import es.ua.dlsi.im3.core.score.Wedge;
import es.ua.dlsi.im3.core.score.dynamics.DynamicCrescendo;
import es.ua.dlsi.im3.core.score.dynamics.DynamicDiminuendo;
import es.ua.dlsi.im3.core.score.io.ISongExporter;
import es.ua.dlsi.im3.core.score.io.XMLExporterHelper;
import es.ua.dlsi.im3.core.score.staves.AnalysisStaff;
import es.ua.dlsi.im3.io.ExportException;
import es.ua.dlsi.im3.metadata.Person;
/**
 * 
 * @author drizo
 *
 */
public class MEISongExporter implements ISongExporter {

	public static final String VERSION = "3.0.0";
	protected ScoreSong song;
	protected StringBuilder sb;
	private Key lastKey;
	private Meter lastMeter;
	private HashMap<Staff, Clef> lastClef;
	static DecimalFormat decimalFormat;
	private HashMap<Bar, HashMap<Staff, ArrayList<StaffMark>>> marksPerBar;
	private ArrayList<ConnectorWithLayer> barConnectors;
	//private HashMap<Bar, HashMap<Staff, ArrayList<Attachment>>> attachmentsPerBar;
	
	class ConnectorWithLayer {
		Connector<?,?> connector;
		StaffLayer layer;
		public ConnectorWithLayer(Connector<?,?> connector, StaffLayer layer) {
			super();
			this.connector = connector;
			this.layer = layer;
		}
		public Connector<?,?> getConnector() {
			return connector;
		}
		public StaffLayer getLayer() {
			return layer;
		}
		
	}
	
	@Override
	public void exportSong(File file, ScoreSong song) throws ExportException {
		PrintStream ps = null;
		try {
			ps = new PrintStream(file, "UTF-8");
			this.song = song;
			//song.createVisualElementsIfNeeded(); // important (e.g. accidentals)
			System.err.println("TO-DO URGENT: song.createVisualElementsIfNeeded"); //TODO URGENT song.createVisualElementsIfNeeded
			preprocess();
			ps.print(exportSong());
		} catch (Exception e) {
			throw new ExportException(e);
		}
		if (ps != null) {
			ps.close();
		}
	}

	protected void preprocess() throws IM3Exception {
		marksPerBar = new HashMap<>();
		if (song.getStaves() != null) {
			for (Staff staff: song.getStaves()) {
				if (!(staff instanceof AnalysisStaff)) {
					for (StaffMark mark: staff.getMarks()) {
						Bar bar = song.getBarActiveAtTime(mark.getTime());
						HashMap<Staff, ArrayList<StaffMark>> barStaves = marksPerBar.get(bar);
						if (barStaves == null) {
							barStaves = new HashMap<>();
							marksPerBar.put(bar, barStaves);
						}
						ArrayList<StaffMark> marks = barStaves.get(staff);
						if (marks == null) {
							marks = new ArrayList<>();
							barStaves.put(staff, marks);
						}
						marks.add(mark);
					}
				}
			}
		}
		
		/*attachmentsPerBar = new HashMap<>();
		if (song.getStaves() != null) {
			for (Staff staff: song.getStaves()) {
				if (!(staff instanceof AnalysisStaff)) {
					for (Attachment attachment: staff.getAttachments()) {
						Bar bar = song.getBarActiveAtTime(attachment.getCoreSymbol().getgetTime());
						HashMap<Staff, ArrayList<StaffMark>> barStaves = marksPerBar.get(bar);
						if (barStaves == null) {
							barStaves = new HashMap<>();
							marksPerBar.put(bar, barStaves);
						}
						ArrayList<StaffMark> marks = barStaves.get(staff);
						if (marks == null) {
							marks = new ArrayList<>();
							barStaves.put(staff, marks);
						marks.add(mark);
					}
				}
			}
		}		*/
	}

	public String exportSong() throws NoMeterException, IM3Exception, ExportException {
		sb = new StringBuilder();
		sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n");
		sb.append("<mei xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.music-encoding.org/ns/mei\" meiversion=\""+VERSION+"\">\n");
		processHead(1);
		processBeforeMusic(1);
		processMusic(1);
		sb.append("</mei>\n");
		return sb.toString();
	}

	protected void processBeforeMusic(int tabs) throws ExportException {		
	}

	private void processHead(int tabs) {
		XMLExporterHelper.start(sb, tabs, "meiHead");
		processFileDesc(tabs+1);
		processEncodingDesc(tabs+1);
		processWorkDesc(tabs+1);
		XMLExporterHelper.end(sb, tabs, "meiHead");
	}
	

	private void processFileDesc(int tabs) {
		XMLExporterHelper.start(sb, tabs, "fileDesc");
		XMLExporterHelper.start(sb, tabs+1, "titleStmt");
		XMLExporterHelper.text(sb, tabs+2, "title", song.getTitle());
		XMLExporterHelper.end(sb, tabs+1, "titleStmt");
		XMLExporterHelper.end(sb, tabs, "fileDesc");		
	}

	
	private void processEncodingDesc(int tabs) {
		XMLExporterHelper.start(sb, tabs, "encodingDesc");
		XMLExporterHelper.start(sb, tabs+1, "appInfo");
		XMLExporterHelper.start(sb, tabs+2, "application");
		XMLExporterHelper.text(sb, tabs+3, "name", "imcore2");
		XMLExporterHelper.end(sb, tabs+2, "application");
		XMLExporterHelper.end(sb, tabs+1, "appInfo");
		XMLExporterHelper.end(sb, tabs, "encodingDesc");		
	}

	private void processWorkDesc(int tabs) {
		XMLExporterHelper.start(sb, tabs, "workDesc");
		XMLExporterHelper.start(sb, tabs+1, "work");
		XMLExporterHelper.start(sb, tabs+1, "titleStmt");
		XMLExporterHelper.text(sb, tabs+2, "title", song.getTitle());
		XMLExporterHelper.start(sb, tabs+2, "respStmt");
		List<Person> persons = song.getPersons();
		if (persons != null) {
			for (Person person: persons) {
				XMLExporterHelper.text(sb, tabs+3, "persName", person.getName(), "role", "composer");				
			}
		}
		
		XMLExporterHelper.end(sb, tabs+2, "respStmt");
		XMLExporterHelper.end(sb, tabs+1, "titleStmt");		
		XMLExporterHelper.end(sb, tabs+1, "work");
		XMLExporterHelper.end(sb, tabs, "workDesc");
		
	}
	
	private void processMusic(int tabs) throws NoMeterException, IM3Exception, ExportException {
		XMLExporterHelper.start(sb, tabs, "music");
		XMLExporterHelper.start(sb, tabs+1, "body");
		XMLExporterHelper.start(sb, tabs+2, "mdiv");
		XMLExporterHelper.start(sb, tabs+3, "score");
		processScoreDef(tabs+4, song.getFirstMeter(), song.getFirsKey(), true);
		processSections(tabs+4);		
		XMLExporterHelper.end(sb, tabs+3, "score");
		XMLExporterHelper.end(sb, tabs+2, "mdiv");
		XMLExporterHelper.end(sb, tabs+1, "body");
		XMLExporterHelper.end(sb, tabs, "music");
	}

	private void processScoreDef(int tabs, Meter meter, Key key, boolean processStaffDef) throws IM3Exception, ExportException, NoMeterException {
		ArrayList<String> attributes = new ArrayList<>(); 
		if (meter != null) {
			lastMeter = meter;
			//TODO symbol (C, C/...) meters
			attributes.add("meter.count");
			attributes.add(Integer.toString(meter.getNumerator()));
			attributes.add("meter.unit");
			attributes.add(Integer.toString(meter.getDenominator()));
		}
		if (key != null) {
			lastKey = key;
			attributes.add("key.sig");
			if (key.getAccidental() == Accidentals.FLAT) {
				attributes.add((-key.getFifths()) + "f"); //TODO Â¿b o f?
			} else if (key.getAccidental() == Accidentals.SHARP) {
				attributes.add(key.getFifths() + "s");
			} else if (key.getAccidental() == null || key.getAccidental() == Accidentals.NATURAL) {
				attributes.add("0");
			} else {
				throw new ExportException("Unsupported key accidental: " + key.getAccidental());
			}
			attributes.add("key.mode");
			attributes.add(key.getMode().name().toLowerCase());
		}		
		if (processStaffDef) {
			XMLExporterHelper.start(sb, tabs, "scoreDef", attributes);
			processStaffDef(tabs+1);
			XMLExporterHelper.end(sb, tabs, "scoreDef");		
		} else {
			XMLExporterHelper.startEnd(sb, tabs, "scoreDef", attributes);
		}
	}
	private void processSections(int tabs) throws IM3Exception, ExportException, NoMeterException {		
		XMLExporterHelper.start(sb, tabs, "section");
		processMeasures(tabs+1);
		XMLExporterHelper.end(sb, tabs, "section");
	}

	private void processFirstClef(Clef clef, ArrayList<String> params) {
		processClef(clef, params, "clef.");
	}
	
	private void processClefChange(Clef clef, ArrayList<String> params) {
		processClef(clef, params, "");
	}

	private void processClef(Clef clef, ArrayList<String> params, String prefix) {
		params.add(prefix + "line");
		params.add(Integer.toString(clef.getLine()));
		params.add(prefix + "shape");
		params.add(clef.getNote().name().toUpperCase()); //TODO percusion, tabs
		if (clef.getOctaveChange() != 0) {
			params.add(prefix + "dis");
			params.add(Integer.toString(Math.abs(clef.getOctaveChange()*8)));
			params.add(prefix + "dis.place");
			if (clef.getOctaveChange() < 0) {
				params.add("below");
			} else {
				params.add("above");
			}
		}
	}
	private void processStaffDef(int tabs) {
		lastClef = new HashMap<>();
		XMLExporterHelper.start(sb, tabs, "staffGrp");
		for (Staff staff: song.getStaves()) {
			if (!(staff instanceof AnalysisStaff)) {
				ArrayList<String> params = new ArrayList<>();
				params.add("n");
				params.add(getNumber(staff));
				Clef clef = staff.getClefAtTime(Time.TIME_ZERO);
				lastClef.put(staff, clef);
				processFirstClef(clef, params);
				params.add("lines");
				params.add(Integer.toString(staff.getLineCount()));		
				XMLExporterHelper.startEnd(sb, tabs+1, "staffDef", params);
			}
		}
		XMLExporterHelper.end(sb, tabs, "staffGrp");
	}

	/*class SymbolsInStavesAndLayers {
		HashMap<Staff, HashMap<StaffLayer, ArrayList<LayeredCoreSymbol>>> symbols;
		
		public SymbolsInStavesAndLayers() {
			symbols = new HashMap<>();
		}
		
		private ArrayList<LayeredCoreSymbol> getSymbolsInLayer(HashMap<StaffLayer, ArrayList<LayeredCoreSymbol>> map, StaffLayer layer) {
			ArrayList<LayeredCoreSymbol> result = map.get(layer);
			if (result == null) {
				result = new ArrayList<>();
				map.put(layer, result);
			}
			return result;			
		}
		public ArrayList<LayeredCoreSymbol> getSymbolsInLayer(Staff staff, StaffLayer layer) {
			HashMap<StaffLayer, ArrayList<LayeredCoreSymbol>> map = symbols.get(staff);
			if (map == null) {
				map = new HashMap<>();
				symbols.put(staff, map);
			}
			return getSymbolsInLayer(map, layer);			
		}

		public HashMap<Staff, HashMap<StaffLayer, ArrayList<LayeredCoreSymbol>>> getSymbols() {
			return symbols;
		}
	}
	
	private int indexOfBarAtTime(Time time) throws ExportException, IM3Exception {
		Bar bar = song.getBarActiveAtTime(time);
		if (bar == null) {
			throw new ExportException("No bar found for time " + time);
		}
		return bar.getNumber();
	}*/
	
	private void processMeasures(int tabs) throws IM3Exception, ExportException, NoMeterException {
		ArrayList<Bar> bars = song.getBarsAsArray();
		
		for (Bar bar : bars) {
			//TODO xmlid
			boolean processScoreDef = false;
			//TODO Cambios en medio del compÃ¡s
			Key barKey = song.getKeyWithOnsetOrNull(bar.getTime());
			if (lastKey == null || barKey != null && !barKey.equals(lastKey)) {
				processScoreDef = true;
			}
			Meter barMeter = song.getMeterWithOnsetOrNull(bar.getTime());
			if (lastMeter == null || barMeter != null && !barMeter.equals(lastMeter)) {
				processScoreDef = true;
			}
			if (processScoreDef) {
				processScoreDef(tabs, barMeter, barKey, false);
			}
			
			XMLExporterHelper.start(sb, tabs, "measure", "n", 
					Integer.toString(bar.getNumber()), "xml:id", 
					generateID(bar));

			barConnectors = new ArrayList<>();
			
			//SymbolsInStavesAndLayers symbolsInBar = new SymbolsInStavesAndLayers();
			for (Staff staff: song.getStaves()) {
				if (!(staff instanceof AnalysisStaff)) {
					XMLExporterHelper.start(sb, tabs+1, "staff", "n", getNumber(staff));
					for (StaffLayer layer: staff.getNonBackgroundLayers()) {
						XMLExporterHelper.start(sb, tabs+2, "layer", "n", getNumber(layer));
						processBarLayer(tabs+3, bar, staff, layer); //TODO que no salga si en la capa no hay nada
						XMLExporterHelper.end(sb, tabs+2, "layer");
					}
					processBar(tabs+2, bar, staff);
					XMLExporterHelper.end(sb, tabs+1, "staff");
				} 
			}
			
			// connectors
			// all of theses should already be inserter for (Connector connector: song.getConnectors()) {
			
			for (ConnectorWithLayer connector: barConnectors) {
				generateConnector(tabs, bar, connector.getConnector(), connector.getLayer().getStaff(), connector.getLayer());
			}
			
			XMLExporterHelper.end(sb, tabs, "measure"); 
		}
		
	}

	private void processBar(int tabs, Bar bar, Staff staff) throws IM3Exception, ExportException {
		// now add all marks
		HashMap<Staff, ArrayList<StaffMark>> mpb = marksPerBar.get(bar);
		if (mpb != null) { // not all bars have marks
			ArrayList<StaffMark> marks = mpb.get(staff);
			if (marks != null) {
				for (StaffMark staffMark: marks) {
					String text = generateTextForStaffMark(staffMark);
					if (text != null) {
						XMLExporterHelper.text(sb, tabs, "dynam", text, "staff", getNumber(staff), "tstamp", generateTStamp(bar, staffMark.getTime()));
					} // else ledger lines... that we don't export
				}
			}
		}
		//barConnectors
	}
	
	private String getNumber(Staff staff) {
		return Integer.toString(staff.getNumberIdentifier());
	}

	private String getNumber(StaffLayer layer) {
		return Integer.toString(layer.getNumber());
	}
	
	private void generateConnector(int tabs, Bar bar, Connector<?,?> connector, Staff staff, StaffLayer layer) throws ExportException, IM3Exception {
		if (connector instanceof Slur) {
			if (!(connector.getFrom() instanceof ITimedElement)) {
				throw new ExportException("Cannot export a slur linked to a non timed element");
			}
			if (!(connector.getTo() instanceof ITimedElement)) {
				throw new ExportException("Cannot export a slur linked to a non timed element");
			}
			ArrayList<String> params = new ArrayList<>();
			params.add("staff");
			params.add(getNumber(staff));
			params.add("layer");
			params.add(getNumber(layer));
			/*String tstamp = generateTStamp(bar, ((ITimedElement)connector.getFrom()).getTime());
			String tstamp2 = generateTStamp2(bar, ((ITimedElement)connector.getTo()).getTime()); //TODO Â¿end time?
			params.add("tstamp");
			params.add(tstamp);
			params.add("tstamp2");
			params.add(tstamp2);*/
			params.add("startid");
			params.add(generateID(connector.getFrom()));
			params.add("endid");
			params.add(generateID(connector.getTo()));
			XMLExporterHelper.startEnd(sb, tabs, "slur", params);
		} else if (connector instanceof Tie) {
			//TODO TIE
			System.err.println("TO-DO Tie");
		} else if (connector instanceof Wedge) {
			String tstamp = generateTStamp(bar, ((ITimedElement)connector.getFrom()).getTime());
			String tstamp2 = generateTStamp2(bar, ((ITimedElement)connector.getTo()).getTime());
			ArrayList<String> params = new ArrayList<>();
			params.add("staff");
			params.add(getNumber(staff));
			params.add("layer");
			params.add(getNumber(layer));			
			params.add("tstamp");
			params.add(tstamp);
			params.add("tstamp2");
			params.add(tstamp2);
			params.add("form");
			if (connector instanceof DynamicCrescendo) {
				params.add("cres");
			} else if (connector instanceof DynamicDiminuendo) {
				params.add("dim");
			} else {
				throw new ExportException("Cannot export class: " + connector.getClass());
			}
			XMLExporterHelper.startEnd(sb, tabs, "hairpin", params);
			
		} else if (!(connector instanceof Beam)) {
			throw new UnsupportedOperationException("Unsupported exporting " + connector.getClass());
		} 
	}

	private String generateID(IUniqueIDObject symbol) {
		return "#" + song.getIdManager().getID(symbol);
	}

	private void processBarLayer(int tabs, Bar bar, Staff staff, StaffLayer layer) throws ExportException, IM3Exception {		
		//TODO se podrÃ­a optimizar mÃ¡s, pero no sÃ© si vale la pena para 10 sÃ­mbolos por compÃ¡s...
		List<AtomFigure> atomFigures = song.getAtomFiguresWithOnsetWithin(bar);
		for (AtomFigure atomFigure: atomFigures) {
			if (atomFigure.getLayer() == layer) {
				Clef clefForSymbol = staff.getRunningClefAt(atomFigure.getTime());
				if (!lastClef.get(staff).equals(clefForSymbol)) {
					ArrayList<String> params = new ArrayList<>();
					processClefChange(clefForSymbol, params);					
					//double timeStamp = (double) (bar.getTime() - clefForSymbol.getTime()) / (double) AbstractSong.DEFAULT_RESOLUTION;
					params.add("tstamp");
					params.add(generateTStamp(bar, clefForSymbol.getTime()));
					
					XMLExporterHelper.startEnd(sb, tabs, "clef", params);
					
					lastClef.put(staff, clefForSymbol);
				}
				processDurationalSymbol(tabs, atomFigure);				
			}
		}
		
		// process non durational symbols
		List<StaffTimedPlaceHolder> placeHolders = layer.getStaffPlaceHoldersWithOnsetWithin(bar);
		for (StaffTimedPlaceHolder staffTimedPlaceHolder : placeHolders) {
			addConnectors(staffTimedPlaceHolder, staffTimedPlaceHolder.getLayer());
		}
	}
	
	private String generateTextForStaffMark(StaffMark staffMark) {
		if (staffMark instanceof DynamicMark) {
			return ((DynamicMark)staffMark).getText();
		} else if (!(staffMark instanceof LedgerLines)) {
			throw new UnsupportedOperationException("TO-DO: text for dynamics for class " + staffMark.getClass());
		} else {
			return null;
		}
	}

	public static String generateTStamp(Bar bar, Time time) throws IM3Exception, ExportException {
		double tstamp = time.substract(bar.getTime()).getComputedTime(); 
		if (tstamp < 0) {
			throw new ExportException("Invalid negative tstamp: " + tstamp + ", from time=" + time + " in bar " + bar + " of time " + bar.getTime());
		}
		if (decimalFormat == null) {
			decimalFormat = new DecimalFormat();
			decimalFormat.setMinimumFractionDigits(0);
			decimalFormat.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));
		}
		return decimalFormat.format(tstamp+1);
	}

	public static String generateTStamp2(Bar bar, Time time) throws IM3Exception, ExportException {
		Bar destBar = bar.getSong().getBarActiveAtTime(time);
		int barsCrossed = destBar.getNumber() - bar.getNumber();
		StringBuilder sb = new StringBuilder();
		sb.append(barsCrossed);
		sb.append('m');
		sb.append('+');
		sb.append(generateTStamp(destBar, time));
		return sb.toString();
	}

	// could be more ellegant !!
	private String getFigureMEIDur(Figures figure) throws ExportException {
		switch (figure) {
			case LONGA: return "longa"; //TODO
			case BREVE: return "0";
			case WHOLE: return "1";
			case HALF: return "2";
			case QUARTER: return "4";
			case EIGHTH: return "8";
			case EIGTHEEN: return "16";
			case THIRTY_SECOND: return "32";
			case SIXTY_FOURTH: return "64";
			case TWO_HUNDRED_FIFTY_SIX: return "128";
			default: 
				throw new ExportException("Unsupported figure: " + figure);
			
		}
	}
	
	
	private void fillDurationParams(AtomFigure atomFigure, ArrayList<String> params) throws ExportException {
		params.add("dur");
		if (atomFigure.getFigure() == null) {
			throw new ExportException("Durational symbol has not a figure: " + atomFigure);
		}
		params.add(getFigureMEIDur(atomFigure.getFigure()));
		if (atomFigure.getDots() > 0) {
			params.add("dots");
			params.add(Integer.toString(atomFigure.getDots()));
		}
	}
	
	private void processDurationalSymbol(int tabs, AtomFigure atomFigure) throws ExportException, IM3Exception {
		ArrayList<String> params = new ArrayList<>();
		params.add("xml:id");
		params.add(generateID(atomFigure)); 
		fillDurationParams(atomFigure, params);
		if (atomFigure.isRest()) {			
			XMLExporterHelper.startEnd(sb, tabs, "rest", params); //TODO Multimeasure rest
		} else if (atomFigure.isChord()) {
			XMLExporterHelper.start(sb, tabs, "chord", params);
			processPitches(sb, tabs, atomFigure, false);
			//TODO Ties en chords
			XMLExporterHelper.end(sb, tabs, "chord");						
		} else {			
			//TODO stems...
			processPitches(sb, tabs-1, atomFigure, true); // -1 because process pitches adds 1
			//addNoteTies(atomFigure, params);
			//XMLExporterHelper.startEnd(sb, tabs, "note", params);			
		} 
		
		//TODO Beams...

		
	}

	private void processPitches(StringBuilder sb, int tabs, AtomFigure atomFigure, boolean generateDurations) throws ExportException {
		if (atomFigure.getOnsetPitches() != null) {
			for (AtomPitch atomPitch: atomFigure.getOnsetPitches()) {
				ArrayList<String> noteParams = new ArrayList<>();
				noteParams.add("xml:id");
				noteParams.add(generateID(atomPitch)); 
				if (generateDurations) {
					fillDurationParams(atomFigure, noteParams);
				}
				processPitchesParams(atomPitch, false, atomPitch.isTiedToNext(), noteParams, atomFigure.getLayer());
				XMLExporterHelper.startEnd(sb, tabs+1, "note", noteParams);				
			}
		}
		if (atomFigure.getContinuationPitches() != null) {
			for (AtomContinuationPitch atomContPitch: atomFigure.getContinuationPitches()) {
				ArrayList<String> noteParams = new ArrayList<>();
				noteParams.add("xml:id");
				noteParams.add(generateID(atomContPitch));
				if (generateDurations) {
					fillDurationParams(atomFigure, noteParams);
				}				
				processPitchesParams(atomContPitch.getFromPitch(), false, true, noteParams, atomFigure.getLayer());
				XMLExporterHelper.startEnd(sb, tabs+1, "note", noteParams);				
			}
		}
		addConnectors(atomFigure, atomFigure.getLayer()); //TODO 
	}

	/*FRACTIONS private void addNoteTies(AtomFigure note, ArrayList<String> params) {
		//TODO esto es con los acordes, con las notas estamos repitiendo lo mismo (ver processPitchesParams)
		if (note.getTiedToNext() != null) {
			params.add("tie");
			params.add("i");
		} else if (note.getTiedFrom() != null) {
			params.add("tie");
			params.add("t"); //TO-DO from + to --> "m"			
		}
	}*/

	private void addConnectors(ISymbolWithConnectors symbol, StaffLayer layer) {
		//System.out.println("Adding: " + symbol + "---" + symbol.getConnectors());
		if (symbol.getConnectors() != null) {
			for (Connector<?,?> connector: symbol.getConnectors()) {
				//System.out.println("\t" + connector.getClass());
				if (connector.getFrom() == symbol) {				
					barConnectors.add(new ConnectorWithLayer(connector, layer));
				}
			}
		}
		
	}
	private void processPitchesParams(AtomPitch atomPitch, boolean tiedToNext, boolean tiedFromPrevious, ArrayList<String> params, StaffLayer layer) throws ExportException {
		addConnectors(atomPitch.getAtomFigure(), layer);
		
		ScientificPitch scorePitch = atomPitch.getScientificPitch();
		params.add("pname");
		params.add(scorePitch.getPitchClass().getNoteName().name().toLowerCase());
		params.add("oct");
		params.add(Integer.toString(scorePitch.getOctave()));
		if (scorePitch.getPitchClass().getAccidental() != null) {
				//(atomPitch.isForcePaintAccidental() || scorePitch != null)) {
			params.add("accid.ges");
			switch (scorePitch.getPitchClass().getAccidental()) {
			case DOUBLE_FLAT: 
				params.add("ff"); 
				break;
			case FLAT: 
				params.add("f"); 
				break;
			case NATURAL: 
				params.add("n"); 
				break;
			case SHARP: 
				params.add("s"); 
				break;
			case DOUBLE_SHARP: 
				params.add("ss"); 
				break;
			case TRIPLE_FLAT: 
				params.add("tf"); 
				break;
				default:
					throw new ExportException("Unsupported accidental: "+ scorePitch.getPitchClass().getAccidental());
			}
		}
		//TODO esto es con los acordes, con las notas estamos repitiendo lo mismo ? Â¿Lo dejamos asÃ­?
		if (tiedToNext) {
			params.add("tie");
			params.add("i");
		} else if (tiedFromPrevious) {
			params.add("tie");
			params.add("t"); //TO-DO from + to --> "m"			
		}
	}

	public ScoreSong getSong() {
		return song;
	}

	

}
