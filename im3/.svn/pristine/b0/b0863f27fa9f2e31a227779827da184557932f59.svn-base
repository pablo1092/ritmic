package es.ua.dlsi.im3.core.score;

import java.util.Map.Entry;

import es.ua.dlsi.im3.IM3Exception;

import java.util.TreeMap;


/**
 * Always use modern analysis
 * @author drizo
 *
 */
public class StaffAnalysisLayer extends StaffLayer {
	TreeMap<Time, ScoreAnalysisHook> analysisHooks;
	
	public StaffAnalysisLayer(Staff staff, int number) {
		super(staff, number);
		analysisHooks = new TreeMap<>();
	}


	public void addAnalysisHook(ScoreAnalysisHook e) throws IM3Exception {
		analysisHooks.put(e.getTime(), e);
	}


	public ScoreAnalysisHook findAnalysisHookWithOnset(Time time) throws IM3Exception {
		ScoreAnalysisHook result = analysisHooks.get(time);
		if (result == null) {
			throw new IM3Exception("Cannot find an analysis hook with time " + time);
		} else {
			return result;
		}
		
	}


	public ScoreAnalysisHook findLastAnalysisHookBeforeOrEqualsOnset(Time time) throws IM3Exception {
		Entry<Time, ScoreAnalysisHook> entry = analysisHooks.floorEntry(time);
		if (entry == null) {
			throw new IM3Exception("Cannot find an analysis hook with time <=" + time);
		} else {
			return entry.getValue();
		}
	}


	public ScoreAnalysisHook findLastAnalysisHookAfterOrEqualsOnset(Time time) throws IM3Exception {
		Entry<Time, ScoreAnalysisHook> entry = analysisHooks.ceilingEntry(time);
		if (entry == null) {
			throw new IM3Exception("Cannot find an analysis hook with time >=" + time);
		} else {
			return entry.getValue();
		}
	}


	public ScoreAnalysisHook findLastAnalysisHook() {
		return analysisHooks.lastEntry().getValue();
	}


	public boolean hasAnalysisHooks() {
		return !analysisHooks.isEmpty();
	}
	
}
