package es.ua.dlsi.im3.core.score;

import org.apache.commons.lang3.math.Fraction;

public enum Figures {	
	QUADRUPLE_WHOLE (16,1, NotationType.eModern),
	DOUBLE_WHOLE (8,1, NotationType.eModern),
	WHOLE (4,1, NotationType.eModern),
	HALF (2,1, NotationType.eModern),
	QUARTER (1,1, NotationType.eModern),
	EIGHTH (1,2, NotationType.eModern),
	EIGTHEEN (1, 4, NotationType.eModern), 
	SIXTEENTH (1, 8, NotationType.eModern), 
	THIRTY_SECOND (1, 16, NotationType.eModern), 
	SIXTY_FOURTH (1, 32, NotationType.eModern), 
	HUNDRED_TWENTY_EIGHTH (1, 64, NotationType.eModern), 
	TWO_HUNDRED_FIFTY_SIX (1, 128, NotationType.eModern), 
	MAXIMA (32, 1, NotationType.eMensural), 
	LONGA (16, 1, NotationType.eMensural),
	BREVE (8, 1, NotationType.eMensural),
	SEMIBREVE (4, 1, NotationType.eMensural), 
	MINIMA (1, 1, NotationType.eMensural),
	SEMINIMA (1, 2, NotationType.eMensural), 
	FUSA (1, 4, NotationType.eMensural),
	SEMIFUSA (1, 8, NotationType.eMensural);
	
	Fraction duration;
	int meterUnit;
	NotationType notationType;
	
	Figures(int quarters, int quarterSubdivisions, NotationType notationType) {
		duration = Fraction.getFraction(quarters, quarterSubdivisions);
		this.notationType = notationType;
	}

	public Fraction getDuration() {
		return duration;
	}
	
	
	
	public final NotationType getNotationType() {
		return notationType;
	}

	/**
	 * Compute the duration of the figure using dots
	 * @param dots
	 * @return
	 */
	public Fraction getDurationWith(int dots) {
		Fraction sumDurations = duration;
		Fraction lastDur = sumDurations;
		
		for (int i=0; i<dots; i++) {
			lastDur = lastDur.multiplyBy(Fraction.ONE_HALF);
			sumDurations = sumDurations.add(lastDur);
		}
		
		return sumDurations;		
	}

}
